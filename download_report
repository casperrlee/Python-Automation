# Logs in daily to reporting website (uses Chrome profile bypassing 2-Factor Authentication), downloads the necessary file, and adds it into existing table in SQL database

import pandas as pd
from datetime import datetime
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
import sqlalchemy as sa
from sqlalchemy import types
import cx_Oracle
import os
from openpyxl import load_workbook
import glob

class InventoryReport():
    def get_inv_file(self):
        options = webdriver.ChromeOptions()
        options.add_argument('user-data-dir=C:\\Users\\USERNAME\\AppData\\Local\\Google\\Chrome\\User Data Test')
        options.add_argument('--profile-directory=Default')
        options.add_argument('--disable-popup-blocking')
        options.add_argument('--no-sandbox')
        options.add_argument('--remote-debugging-port=9222')
        options.add_argument('--disable-dev-shm-using')

        browser = webdriver.Chrome(r'C:\Program Files (x86)\chromedriver.exe', options=options)

        time.sleep(1)

        browser.get('WEBSITE')
        browser.maximize_window()
        time.sleep(1)

        try:
            submit_btn = WebDriverWait(browser, 10).until(EC.presence_of_element_located((By.ID, 'signInSubmit')))
            time.sleep(1)
            submit_btn.click()
            print('Sign-in button detected.')
        except TimeoutException:
            print('No sign-in button detected.')

        action = webdriver.ActionChains(browser)

        reports = WebDriverWait(browser, 30).until(EC.presence_of_element_located((By.ID, 'vss_navbar_tab_reports_text')))
        action.move_to_element(reports)
        action.perform()

        reports_tab = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, 'ARAP_I90_****_Retail_Analytics_text')))
        reports_tab.click()

        inventory_health = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH,'/html/body/div[2]/div[2]/div/div/div/div/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div/ul/li[2]/div/div/div/span[1]/a')))

        actions = webdriver.ActionChains(browser)
        actions.move_to_element(inventory_health)
        actions.click(inventory_health)
        actions.perform()

        daily_rpt = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, 'dashboard-filter-reportingRange')))
        daily_rpt.click()
        
        time.sleep(1)
        
        daily_change = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="dashboard-filter-reportingRange"]/div/awsui-button-dropdown/div/div/ul/li[1]')))
        daily_change.click()
        
        time.sleep(1)
        
        apply_btn = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="dashboard-filter-applyCancel"]/div/awsui-button[2]/button')))
        apply_btn.click()

        time.sleep(1)
        
        downloadBtn = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.ID, 'downloadButton')))
        time.sleep(3)
        downloadBtn.click()
        download2 = WebDriverWait(browser, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="downloadButton"]/awsui-button-dropdown/div/div/ul/li/ul/li[1]')))
        download2.click()

        time.sleep(15)
        browser.switch_to.alert.accept()

        print('Downloading report...')

        time.sleep(10)

    def grab_and_sql(self):
        sales_diagnostic_file = glob.glob(r'C:\Users\USERNAME\Downloads\Inventory Health_US*.xlsx')
        filename = max(sales_diagnostic_file, key=os.path.getctime)
        print(filename)

        wb1 = load_workbook(filename)
        ws1 = wb1['US_Inventory Health_Inventory H']

        inventory = pd.read_excel(filename, header=1)
        inventory = inventory[['ASIN', 'Sellable On Hand Inventory', 'Sellable On Hand Units', 'Unsellable On Hand Inventory', 'Unsellable On Hand Units']]

        now = datetime.now()
        inventory['Time'] = now

        inventory = inventory[['Time', 'ASIN', 'Sellable On Hand Inventory', 'Sellable On Hand Units', 'Unsellable On Hand Inventory', 'Unsellable On Hand Units']]

        dty = {c: types.VARCHAR(inventory[c].str.len().max()) for c in
               inventory.columns[inventory.dtypes == 'object'].tolist()}

        oracle_db = sa.create_engine('oracle+cx_oracle://SQL_DATABASE')
        connection = oracle_db.connect()

        inventory.to_sql('TABLE_NAME', connection, schema='DATABASE_NAME', if_exists='append', index=False, dtype=dty)
        connection.close()

        print('Sending to SQL...')

    def main(self):
        self.get_inv_file()
        self.grab_and_sql()

run = InventoryReport()
run.main()
